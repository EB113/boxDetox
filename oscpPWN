#!/usr/bin/python3.7

import traceback,pyfiglet
import sys,os,json
import socket

from src.miscellaneous.config import bcolors, Config

# Check if oscpPWN logger is on!
def checkLogger():
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	try:
		s.connect((Config.LOGGERIP,int(Config.LOGGERPORT)))
		s.shutdown(2)
		return True
	except:
		return False

# Export Session Config Values to JSON
def configExport(pathOUT):
	cfg = {}
	members = [attr for attr in dir(Config) if not callable(getattr(Config, attr)) and not attr.startswith("__")]
	for member in members:
		cfg[member] = getattr(Config,member)
	fd = open(pathOUT,"w")
	fd.write(json.dumps(cfg))
	fd.close()
# Import JSON values to Config
def configImport(pathIN):
	fd = open(pathIN,"r")
	cfg = json.loads(fd.read())
	fd.close()
	for k,v in cfg.items():
		setattr(Config,k,v)
	
# Get running PATH
path = os.getcwd()

if len(sys.argv) == 1:
	# BANNER
	print("{}{}{}".format(bcolors.HEADER,pyfiglet.figlet_format("oscpPWN"),bcolors.ENDC))	
	
	# Get directories under ./db/sessions
	first = True
	print("\nSessions Available:")
	for subdirs,dirs,files in os.walk(path+"/db/sessions/"):
		if first:
			first = False
			continue
		session = subdirs.split("/db/sessions/")
		session = session[1].split("/")
		if len(session) == 1:
			print("[*] {}".format(session[0]))
	try:
		sessID = input("Choose/Create a Session:\n>>> ")
	except:
		exit()
	# Setup files as directories, load configs
	try:
		if not os.path.isdir(path+"/db/sessions/"+sessID):
			os.mkdir(path+"/db/sessions/"+sessID)
			os.mkdir(path+"/db/sessions/"+sessID+"/profiles")
			os.mkdir(path+"/db/sessions/"+sessID+"/modules")
			configExport(path+"/db/sessions/"+sessID+"/config.py")
		else:
			configImport(path+"/db/sessions/"+sessID+"/config.py")
		Config.PATH = path
	except Exception as e:
		print("{}".format(e))
		print("{}".format(traceback.print_exc()))
		print("{}Error initiating session! Check {}/db/sessions permissions.{}".format(bcolors.WARNING,Config.PATH,bcolors.ENDC))
		exit()
		
	print("{}Checking Logger Status...{}".format(bcolors.OKGREEN,bcolors.ENDC))
	status = checkLogger()
	if status:
		Config.LOGGERSTATUS = "True"
	else:
		Config.LOGGERSTATUS = "False"	
	print("{}Status:{}{}".format(bcolors.OKGREEN,status,bcolors.ENDC))	
	
	from src.menus.menu import parse,watchdog
	
	# Start main loop
	Config.SESSID = sessID	
	state = "main"
	while state != "exit":
		try:
			state = parse(input(bcolors.BOLD + bcolors.OKGREEN + "["+state+"]>>> " + bcolors.ENDC))
		except Exception as e:
			print("{}".format(e))
			print("{}".format(traceback.print_exc()))
			break

	Config.LOGGERSTATUS = False
	watchdog.flag.set()
	watchdog.join()
	del watchdog
	try:
		configExport(Config.PATH+"/db/sessions/"+sessID+"/config.py")
	except Exception as e:
		print("{}".format(e))
		print("{}".format(traceback.print_exc()))
		print("{}Error saving session config file!{}".format(bcolors.WARNING,bcolors.ENDC))

elif len(sys.argv) == 2:
	if sys.argv[1] == "config":
		os.system(Config.EDITOR+" "+path+"/src/miscellaneous/config.py")
	elif sys.argv[1] == "logger":
		from src import logger
	else:
		print("{}Oy, Wat u Doink m8! ./oscpPWN or ./oscpPWN <config||logger>{}".format(bcolors.WARNING,bcolors.ENDC))

else:
	print("{}Oy, Wat u Doink m8! ./oscpPWN or ./oscpPWN <config||logger>{}".format(bcolors.WARNING,bcolors.ENDC))

exit()
